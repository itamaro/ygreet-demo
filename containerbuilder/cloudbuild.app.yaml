steps:

# Pull & retag C++ builder image locally for easier usage
- name: gcr.io/cloud-builders/docker
  args: ['pull', 'gcr.io/$PROJECT_ID/ygreet-cpp-builder:latest']
  waitFor: '-'
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/$PROJECT_ID/ygreet-cpp-builder:latest', 'ygreet-cpp-builder:latest']
# Compile proto to C++ using protoc with gRPC plugin
# and build service binary with gcc
- name: gcr.io/cloud-builders/docker
  dir: app
  args: ['run', '-t', '--rm', '-v', '/workspace:/workspace',
         '-w', '/workspace/app', 'ygreet-cpp-builder', './build-cpp.sh']
# Build service Docker image
# (based on builder image, for build-efficiency, trading-off image-size efficiency)
- name: gcr.io/cloud-builders/docker
  dir: app
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/cppgreet-svc', '-f', 'Dockerfile.cppgreet', '.']

# Pull & retag Python builder image locally for easier usage
- name: gcr.io/cloud-builders/docker
  args: ['pull', 'gcr.io/$PROJECT_ID/ygreet-py-builder:latest']
  waitFor: '-'
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/$PROJECT_ID/ygreet-py-builder:latest', 'ygreet-py-builder:latest']
# Compile proto to Python using protoc gRPC compiler
- name: gcr.io/cloud-builders/docker
  dir: app
  args: ['run', '-t', '--rm', '-v', '/workspace:/workspace', '-w', '/workspace/app',
         'ygreet-py-builder','-I.', '--python_out=.', '--grpc_python_out=.', 'service.proto']
# Build service Docker image
- name: gcr.io/cloud-builders/docker
  dir: app
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/pygreet-svc', '-f', 'Dockerfile.pygreet', '.']

images:
- gcr.io/$PROJECT_ID/cppgreet-svc
- gcr.io/$PROJECT_ID/pygreet-svc
